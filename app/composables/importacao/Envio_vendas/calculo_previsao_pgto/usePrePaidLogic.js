import { useDateUtils } from './useDateUtils.js'
import { useHolidayUtils } from './useHolidayUtils.js'

/**
 * L√≥gica espec√≠fica para transa√ß√µes pr√©-pagas
 */
export const usePrePaidLogic = () => {
  const { criarDataSegura, formatarDataParaBanco } = useDateUtils()
  const { adicionarDiasCorridos, ajustarParaProximoDiaUtil } = useHolidayUtils()

  /**
   * Fun√ß√£o para verificar se √© modalidade pr√©-pago
   */
  const isPrePago = (modalidade) => {
    if (!modalidade) return false
    
    // Normalizar: remover acentos, espa√ßos e caracteres especiais
    const modalidadeNormalizada = modalidade
      .toLowerCase()
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '') // Remove acentos
      .replace(/[^a-z]/g, '') // Remove espa√ßos e caracteres especiais
    
    // Deve conter "prepago" para ser considerado pr√©-pago
    const ehPrePago = modalidadeNormalizada.includes('prepago')
    
    return ehPrePago
  }

  /**
   * Fun√ß√£o para determinar tipo de pr√©-pago
   */
  const getTipoPrePago = (modalidade) => {
    if (!modalidade) return null
    const modalidadeNormalizada = modalidade.toLowerCase().replace(/[^a-z]/g, '')
    
    if (modalidadeNormalizada.includes('debito') || modalidadeNormalizada.includes('d√©bito')) {
      return 'debito'
    }
    if (modalidadeNormalizada.includes('credito') || modalidadeNormalizada.includes('cr√©dito')) {
      return 'credito'
    }
    return null
  }

  /**
   * Calcular previs√£o para transa√ß√µes pr√©-pagas
   * Baseado nas informa√ß√µes das adquirentes:
   * - D√©bito pr√©-pago: D+1 dia √∫til
   * - Cr√©dito pr√©-pago: D+2 dias √∫teis
   */
  const calcularPrevisaoPrePago = (venda) => {
    const tipoPrePago = getTipoPrePago(venda.modalidade)
    const dataVenda = venda.data_venda ?? venda.dataVenda ?? venda.data
    
    console.log('üîç DEBUG calcularPrevisaoPrePago:', {
      modalidade: venda.modalidade,
      tipoPrePago: tipoPrePago,
      dataVenda: dataVenda,
      nsu: venda.nsu
    })
    
    if (!dataVenda) {
      console.log('‚ùå PR√â-PAGO: Data de venda n√£o encontrada')
      return null
    }

    // Converter data de venda para formato de previs√£o
    const dataVendaDate = criarDataSegura(dataVenda)
    if (!dataVendaDate) {
      return null
    }

    let dataPrevisao
    
    if (tipoPrePago === 'debito') {
      // Pr√©-pago d√©bito: MESMA L√ìGICA DO D√âBITO SIMPLES (D+1 e ajustar para pr√≥ximo dia √∫til)
      const dataVendaMais1 = new Date(dataVendaDate)
      dataVendaMais1.setDate(dataVendaMais1.getDate() + 1)
      dataPrevisao = ajustarParaProximoDiaUtil(dataVendaMais1)
    } else if (tipoPrePago === 'credito') {
      // Pr√©-pago cr√©dito: MESMA L√ìGICA DO D√âBITO, mas com D+2 dias corridos + ajuste para pr√≥ximo dia √∫til
      const dataVendaMais2 = new Date(dataVendaDate)
      dataVendaMais2.setDate(dataVendaMais2.getDate() + 2)
      dataPrevisao = ajustarParaProximoDiaUtil(dataVendaMais2)
    } else {
      // Gen√©rico: D+1 dia corrido + ajuste para dia √∫til
      const dataVendaMais1 = new Date(dataVendaDate)
      dataVendaMais1.setDate(dataVendaMais1.getDate() + 1)
      dataPrevisao = ajustarParaProximoDiaUtil(dataVendaMais1)
    }

    const resultado = formatarDataParaBanco(dataPrevisao)
    console.log('‚úÖ PR√â-PAGO resultado:', {
      tipoPrePago: tipoPrePago,
      dataPrevisao: dataPrevisao.toISOString().split('T')[0],
      resultado: resultado
    })

    return resultado
  }

  return {
    isPrePago,
    getTipoPrePago,
    calcularPrevisaoPrePago
  }
}